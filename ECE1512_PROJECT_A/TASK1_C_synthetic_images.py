# -*- coding: utf-8 -*-
"""CODE TO SHOW ALL SYNTHETIC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HP9PZxX6mFlmRKcq8YLY6EonNln7SuxK
"""

from google.colab import drive
import os
drive.mount('/content/Mydrive')

from PIL import Image
from torchvision import transforms
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

"""// show MHIST DATASET (REAL/GAUSSIAN)"""

#sythetic mhist dataset real one
image_folder_path = '/content/Mydrive/MyDrive/synthetic_images_real_mhist'

#sythetic mhist dataset gaussian one
#image_folder_path = '/content/Mydrive/MyDrive/synthetic_images_gaussian_mhist'

class_0_images = []
class_1_images = []

for filename in os.listdir(image_folder_path):
    if filename.startswith("class_0") and len(class_0_images) < 50:
        class_0_images.append(os.path.join(image_folder_path, filename))
    elif filename.startswith("class_1") and len(class_1_images) < 50:
        class_1_images.append(os.path.join(image_folder_path, filename))


def display_images(image_paths, class_label, grid_size=(5, 10)):
    fig, axes = plt.subplots(*grid_size, figsize=(15, 10))
    # ADD A TITLE FOR THE CLASS
    fig.suptitle(f"Class {class_label}", fontsize=20)
    axes = axes.flatten()  # Flatten for easy iteration

    # Display images and bring them closer together
    for i, ax in enumerate(axes):
        if i < len(image_paths):
            image = Image.open(image_paths[i])
            ax.imshow(image)
            ax.axis("off")
        else:
            ax.axis("off")

    plt.subplots_adjust(wspace=0.2, hspace=0.2)
    plt.show()

"""//gaussian one"""

# DISPLAY CLASS 0
print('class 0 HP')
display_images(class_0_images, "0", grid_size=(5, 10))

# DISPLAY CLASS 1
print('class 1 SSA')
display_images(class_1_images, "1", grid_size=(5, 10))

"""// real one"""

print('class 0 HP')
display_images(class_0_images, "0", grid_size=(5, 10))

print('class 1 SSA')
display_images(class_1_images, "1", grid_size=(5, 10))

"""//MNIST dataset gaussian noise"""

image_folder_path = '/content/Mydrive/MyDrive/synthetic_images_gaussian_mnist'

class_images = {f"class_{i}": [] for i in range(10)}

for filename in os.listdir(image_folder_path):
    for i in range(10):
        if filename.startswith(f"class_{i}") and len(class_images[f"class_{i}"]) < 10:
            class_images[f"class_{i}"].append(os.path.join(image_folder_path, filename))

#display 10 images per class for 10 classes
fig, axes = plt.subplots(10, 10, figsize=(15, 15))
fig.suptitle("Condensed Synthetic Images per Class (10 Images per Class)", fontsize=16)

axes = axes.flatten()

#display images
index = 0  #keep track of the subplot index
for class_index, (class_label, images) in enumerate(class_images.items()):
    for img_path in images:
        image = Image.open(img_path)
        axes[index].imshow(image)
        axes[index].axis("off")

        # Add a label for each row on the leftmost column
        if index % 10 == 0:
            axes[index].text(-0.5, 0.5, f"Class {class_index}", fontsize=12,
                             ha="right", va="center", transform=axes[index].transAxes)

        index += 1

#for i in range(index, len(axes)):
    #axes[i].axis("off")

plt.subplots_adjust(wspace=0.1, hspace=0.1)
plt.show()

"""//MNIST dataset real images"""

image_folder_path = '/content/Mydrive/MyDrive/synthetic_images_real_mnist'

class_images = {f"class_{i}": [] for i in range(10)}


for filename in os.listdir(image_folder_path):
    for i in range(10):
        if filename.startswith(f"class_{i}") and len(class_images[f"class_{i}"]) < 10:
            class_images[f"class_{i}"].append(os.path.join(image_folder_path, filename))

#display 10 images per class for 10 classes
fig, axes = plt.subplots(10, 10, figsize=(15, 15))
fig.suptitle("Condensed Synthetic Images per Class (10 Images per Class)", fontsize=16)

axes = axes.flatten()

#display images
index = 0
for class_index, (class_label, images) in enumerate(class_images.items()):
    for img_path in images:
        image = Image.open(img_path)
        axes[index].imshow(image)
        axes[index].axis("off")

        #add a label for each row on the leftmost column
        if index % 10 == 0:
            axes[index].text(-0.5, 0.5, f"Class {class_index}", fontsize=12,
                             ha="right", va="center", transform=axes[index].transAxes)

        index += 1

#for i in range(index, len(axes)):
    #axes[i].axis("off")

plt.subplots_adjust(wspace=0.1, hspace=0.1)
plt.show()